#!/usr/bin/env python
"""
Database seeding script for API testing
Creates realistic test data for all models in the system
"""

import os
import sys
import django
from django.core.files.base import ContentFile
from faker import Faker
import random

# Add the project root to the Python path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'graduation_backend.settings')
django.setup()

# Now import Django models
from user.models import User
from books.models import Book
from chunks.models import Chunk
from characters.models import Character, ChunkCharacter, CharacterRelationship

fake = Faker(['en_US', 'ar_SA'])  # English and Arabic locales

class DatabaseSeeder:
    def __init__(self):
        self.users = []
        self.books = []
        self.chunks = []
        self.characters = []
        
        # Sample Arabic text chunks for realistic book content
        self.arabic_text_samples = [
            "ูู ููู ูู ุงูุฃูุงูุ ูุงู ููุงู ุฑุฌู ูุฏุนู ุฃุญูุฏ ูุนูุด ูู ูุฑูุฉ ุตุบูุฑุฉ. ูุงู ุฃุญูุฏ ุฑุฌูุงู ุทูุจ ุงูููุจุ ูุญุจ ูุณุงุนุฏุฉ ุงูุขุฎุฑูู. ูู ุตุจุงุญ ุฃุญุฏ ุงูุฃูุงูุ ุงุณุชููุธ ุฃุญูุฏ ูุจูุฑุงู ูุฎุฑุฌ ุฅูู ุงูุญุฏููุฉ.",
            "ุงูุชูุช ูุงุทูุฉ ุจุตุฏููุชูุง ูุฑูู ูู ุงูุณูู. ูุงูุช ูุงุทูุฉ ุชุจุญุซ ุนู ูุฏูุฉ ูุงุจูุชูุง ุงูุตุบูุฑุฉ ุณุงุฑุฉ. ูุฑูู ุงูุชุฑุญุช ุนูููุง ุฃู ุชุฐูุจ ุฅูู ุงูููุชุจุฉ ูุชุดุชุฑู ููุง ูุชุงุจุงู ุฌูููุงู.",
            "ูุงู ุนูู ุทุงูุจุงู ูุฌุชูุฏุงู ูู ุงูุฌุงูุนุฉ. ูุฏุฑุณ ุงูุฃุฏุจ ุงูุนุฑุจู ููุญูู ุจุฃู ูุตุจุญ ูุงุชุจุงู ูุดููุฑุงู ูููุงู ูุง. ูู ุงููุณุงุกุ ูุฌูุณ ุนูู ูู ููุชุจุชู ุงูุตุบูุฑุฉ ูููุชุจ ุงููุตุต ูุงูุดุนุฑ.",
            "ุนุงุด ูุญูุฏ ูุน ุฌุฏู ุงูุญููู ูู ุจูุช ูุฏูู ุจุฌุงูุจ ุงูููุฑ. ูุงู ุงูุฌุฏ ูุญูู ููุญูุฏ ูุตุตุงู ุฑุงุฆุนุฉ ุนู ุงููุงุถูุ ููุงู ูุญูุฏ ูุณุชูุน ุจุดุบู ุฅูู ูุฐู ุงูุญูุงูุงุช ุงููุซูุฑุฉ.",
            "ูู ุงููุฏููุฉ ุงููุจูุฑุฉุ ูุงูุช ููุงู ุงูุฑุฃุฉ ุชุฏุนู ุฎุฏูุฌุฉ ุชุนูู ุทุจูุจุฉ. ูุงูุช ุฎุฏูุฌุฉ ูุนุฑููุฉ ุจุทูุจุชูุง ููุณุงุนุฏุชูุง ููููุฑุงุก. ูู ูููุ ุชุฐูุจ ุฅูู ุงูุนูุงุฏุฉ ูุชุนุงูุฌ ุงููุฑุถู ุจุญุจ ูุฅุฎูุงุต.",
        ]
        
        # Character names and data for Arabic context
        self.character_templates = [
            {
                "name": "ุฃุญูุฏ", "role": "ุงูุจุทู",
                "physical_characteristics": ["ุทููู ุงููุงูุฉ", "ุฃุณูุฑ ุงูุจุดุฑุฉ", "ุนููู ุจููุฉ"],
                "personality": "ุทูุจ ุงูููุจุ ุดุฌุงุนุ ูุณุงุนุฏ ููุขุฎุฑูู",
                "events": ["ุฎุฑุฌ ุฅูู ุงูุญุฏููุฉ", "ุณุงุนุฏ ุฌุงุฑู ุงููุฑูุถ", "ูุฌุฏ ููุฒุงู ูุฏูููุงู"],
                "relationships": ["ุฒูุฌ ูุงุทูุฉ", "ุตุฏูู ุนูู"],
                "aliases": ["ุฃุจู ูุญูุฏ", "ุงูุฑุฌู ุงูุทูุจ"]
            },
            {
                "name": "ูุงุทูุฉ", "role": "ุงูุฒูุฌุฉ",
                "physical_characteristics": ["ูุชูุณุทุฉ ุงูุทูู", "ุดุนุฑ ุฃุณูุฏ", "ุนููู ุฎุถุฑุงุก"],
                "personality": "ุญูููุฉุ ุฐููุฉุ ููุชูุฉ ุจุงูุฃุทูุงู",
                "events": ["ุฐูุจุช ุฅูู ุงูุณูู", "ุงูุชูุช ุจูุฑูู", "ุงุดุชุฑุช ูุฏูุฉ ูุงุจูุชูุง"],
                "relationships": ["ุฒูุฌุฉ ุฃุญูุฏ", "ุตุฏููุฉ ูุฑูู", "ุฃู ุณุงุฑุฉ"],
                "aliases": ["ุฃู ุณุงุฑุฉ", "ุงูุฃู ุงูุญูููุฉ"]
            },
            {
                "name": "ุนูู", "role": "ุงูุทุงูุจ",
                "physical_characteristics": ["ูุญูู", "ุทููู", "ูุฑุชุฏู ูุธุงุฑุงุช"],
                "personality": "ูุฌุชูุฏุ ุทููุญุ ูุญุจ ููุฃุฏุจ",
                "events": ["ูุฏุฑุณ ูู ุงูุฌุงูุนุฉ", "ููุชุจ ุงููุตุต", "ูุญูู ุจุฃู ูุตุจุญ ูุงุชุจุงู"],
                "relationships": ["ุตุฏูู ุฃุญูุฏ", "ุทุงูุจ ุนูุฏ ุงูุฃุณุชุงุฐ ูุญููุฏ"],
                "aliases": ["ุงูุทุงูุจ ุงููุฌุชูุฏ", "ุงููุงุชุจ ุงูุดุงุจ"]
            },
            {
                "name": "ูุฑูู", "role": "ุงูุตุฏููุฉ",
                "physical_characteristics": ["ูุตูุฑุฉ ุงููุงูุฉ", "ุดุนุฑ ุจูู", "ุงุจุชุณุงูุฉ ุฌูููุฉ"],
                "personality": "ูุฑุญุฉุ ูุดูุทุฉุ ูุญุจุฉ ููุชุณูู",
                "events": ["ุงูุชูุช ุจูุงุทูุฉ", "ูุตุญุชูุง ุจุดุฑุงุก ูุชุงุจ", "ุฐูุจุช ูุนูุง ุฅูู ุงูููุชุจุฉ"],
                "relationships": ["ุตุฏููุฉ ูุงุทูุฉ", "ุฌุงุฑุฉ ุฎุฏูุฌุฉ"],
                "aliases": ["ุงููุฑุฃุฉ ุงููุฑุญุฉ", "ุงูุตุฏููุฉ ุงููููุฉ"]
            },
            {
                "name": "ุฎุฏูุฌุฉ", "role": "ุงูุทุจูุจุฉ",
                "physical_characteristics": ["ุฃูููุฉ ุงููุธูุฑ", "ุดุนุฑ ูุตูุฑ", "ุนููู ุฐููุฉ"],
                "personality": "ุญูููุฉุ ุทูุจุฉุ ูุฎูุตุฉ ูู ุนูููุง",
                "events": ["ุชุนุงูุฌ ุงููุฑุถู", "ุชุณุงุนุฏ ุงูููุฑุงุก", "ุชุนูู ูู ุงูุนูุงุฏุฉ"],
                "relationships": ["ุฌุงุฑุฉ ูุฑูู", "ุทุจูุจุฉ ุงูุนุงุฆูุฉ"],
                "aliases": ["ุงูุทุจูุจุฉ ุงูุทูุจุฉ", "ุงูุญูููุฉ"]
            }
        ]

    def clear_database(self):
        """Clear all existing data"""
        print("๐๏ธ  Clearing existing data...")
        CharacterRelationship.objects.all().delete()
        ChunkCharacter.objects.all().delete()
        Character.objects.all().delete()
        Chunk.objects.all().delete()
        Book.objects.all().delete()
        User.objects.exclude(is_superuser=True).delete()  # Keep superuser
        print("โ Database cleared!")

    def create_users(self, count=10):
        """Create test users"""
        print(f"๐ฅ Creating {count} users...")
        for i in range(count):
            user = User.objects.create_user(
                email=fake.email(),
                name=fake.name(),
                first_name=fake.first_name(),
                last_name=fake.last_name(),
                password='testpass123',
                is_active=True
            )
            self.users.append(user)
        print(f"โ Created {len(self.users)} users!")

    def create_books(self, count=8):
        """Create test books"""
        print(f"๐ Creating {count} books...")
        book_titles = [
            "ุงูุทุฑูู", "ุจูู ุงููุตุฑูู", "ูุตุฑ ุงูุดูู", "ุงูุณูุฑูุฉ",
            "ุฃููุงุฏ ุญุงุฑุชูุง", "ุงูุญุฑุงููุด", "ููุญูุฉ ุงูุญุฑุงููุด", "ุงููุฑูู", "ุงููุฑุงูุง",
            "ุญุฏูุซ ุงูุตุจุงุญ ูุงููุณุงุก", "ุฃุตุฏุงุก ุงูุณูุฑุฉ ุงูุฐุงุชูุฉ", "ุงูุจุงูู ูู ุงูุฒูู ุณุงุนุฉ",
            "ุฑุญูุฉ ุงุจู ูุทููุฉ", "ููุงูู ุฃูู ูููุฉ"
        ]
        authors = ["ูุฌูุจ ูุญููุธ", "ููุณู ุฅุฏุฑูุณ", "ุฅุญุณุงู ุนุจุฏ ุงููุฏูุณ", "ุชูููู ุงูุญููู", "ุทู ุญุณูู"]
        
        for i in range(count):
            book_content = "\n\n".join(random.choices(self.arabic_text_samples, k=10))
            file_content = ContentFile(book_content.encode('utf-8'))
            title = book_titles[i] if i < len(book_titles) else fake.sentence(nb_words=3)
            filename = f"book_{i+1}.epub"
            
            book = Book.objects.create(
                title=title,
                user=random.choice(self.users)
            )
            book.file.save(filename, file_content, save=True)
            self.books.append(book)
        print(f"โ Created {len(self.books)} books!")

    def create_chunks(self):
        """Create text chunks for each book"""
        print("๐ Creating text chunks...")
        for book in self.books:
            chunk_count = random.randint(5, 10)
            for i in range(chunk_count):
                chunk_text = random.choice(self.arabic_text_samples)
                chunk = Chunk.objects.create(
                    chunk_text=chunk_text,
                    chunk_number=i + 1,
                    book=book,
                )
                self.chunks.append(chunk)
        print(f"โ Created {len(self.chunks)} chunks!")

    def create_characters(self):
        """Create characters for books"""
        print("๐ค Creating characters...")
        for book in self.books:
            character_count = random.randint(3, 5)
            for i in range(character_count):
                template = random.choice(self.character_templates)
                # Create character without profile (profiles are now chunk-based)
                character = Character.objects.create(
                    book=book
                )
                self.characters.append(character)
        print(f"โ Created {len(self.characters)} characters!")

    def create_chunk_characters(self):
        """Create chunk-character relationships with character profiles"""
        print("๐ Creating chunk-character relationships...")
        relationships_count = 0
        for book in self.books:
            book_chunks = list(book.chunks.all())
            book_characters = list(book.characters.all())
            if not book_characters:
                continue
            for chunk in book_chunks:
                num_mentions = random.randint(1, min(3, len(book_characters)))
                mentioned_characters = random.sample(book_characters, k=num_mentions)
                for character in mentioned_characters:
                    # Create character profile for this chunk
                    template = random.choice(self.character_templates)
                    profile = {
                        "name": template["name"] + (f" {str(character.id)[:8]}" if character.id else ""),
                        "role": template["role"],
                        "personality": template["personality"],
                        "events": template["events"],
                        "relations": template["relationships"],
                        "aliases": template["aliases"],
                        "physical_characteristics": template["physical_characteristics"]
                    }
                    ChunkCharacter.objects.create(
                        chunk=chunk,
                        character=character,
                        character_profile=profile
                    )
                    relationships_count += 1
        print(f"โ Created {len(self.characters)} chunk-character relationships!")

    def create_character_relationships(self):
        """Create character relationships"""
        print("๐ Creating character relationships...")
        relationships_count = 0
        relationship_types = ['family', 'friend', 'enemy', 'romantic', 'colleague']
        
        for book in self.books:
            book_characters = list(book.characters.all())
            book_chunks = list(book.chunks.all())
            if len(book_characters) < 2 or not book_chunks:
                continue
            
            for i, char1 in enumerate(book_characters):
                for char2 in book_characters[i+1:]:
                    if random.random() < 0.5:
                        
                        # --- FIX STARTS HERE ---
                        # Enforce canonical order (pk of 'from' must be less than pk of 'to').
                        # We compare the string representation of the UUIDs.
                        if str(char1.pk) > str(char2.pk):
                            from_char, to_char = char2, char1
                        else:
                            from_char, to_char = char1, char2
                        # --- FIX ENDS HERE ---

                        relationship_type = random.choice(relationship_types)
                        
                        # Create relationship in a random chunk of the book
                        chunk = random.choice(book_chunks)
                        
                        CharacterRelationship.objects.create(
                            from_character=from_char,
                            to_character=to_char,
                            relationship_type=relationship_type,
                            chunk=chunk
                        )
                        relationships_count += 1
        print(f"โ Created {relationships_count} character relationships!")
    
    def print_summary(self):
        """Print summary of created data"""
        print("\n" + "="*50)
        print("๐ DATABASE SEEDING SUMMARY")
        print("="*50)
        print(f"๐ฅ Users: {User.objects.count()}")
        print(f"๐ Books: {Book.objects.count()}")
        print(f"๐ Chunks: {Chunk.objects.count()}")
        print(f"๐ค Characters: {Character.objects.count()}")
        print(f"๐ Chunk-Character relationships: {ChunkCharacter.objects.count()}")
        print(f"๐ Character relationships: {CharacterRelationship.objects.count()}")
        print("="*50)
        
        sample_book = Book.objects.first()
        if sample_book:
            print(f"\n๐ Sample Book: {sample_book.title}")
        
        sample_character = Character.objects.first()
        if sample_character:
            # Get character name from latest chunk profile
            chunk_char = ChunkCharacter.objects.filter(character=sample_character).first()
            if chunk_char and chunk_char.character_profile:
                char_name = chunk_char.character_profile.get('name', 'Unknown')
                char_role = chunk_char.character_profile.get('role', 'Unknown')
                print(f"๐ Sample Character: {char_name} - {char_role}")
            else:
                print(f"๐ Sample Character: {sample_character.id} - No profile yet")
        
        print("\n๐ Database seeding completed successfully!")

    def seed_all(self):
        """Run the complete seeding process"""
        print("๐ฑ Starting database seeding...")
        print("="*50)
        self.clear_database()
        self.create_users()
        self.create_books()
        self.create_chunks()
        self.create_characters()
        self.create_chunk_characters()
        self.create_character_relationships()
        self.print_summary()

if __name__ == "__main__":
    seeder = DatabaseSeeder()
    seeder.seed_all()